{
    "gigasecond": {
        "title": "Gigasecond",
        "summary": "Calculate the moment when someone has lived for 10^9 seconds.",
        "level": "easy",
        "topics": [
            "time"
        ]
    },
    "bob": {
        "title": "Bob",
        "summary": "Bob is a lackadaisical teenager. In conversation, his responses are very limited.",
        "level": "easy",
        "topics": [
            "conditionals",
            "strings"
        ]
    },
    "acronym": {
        "title": "Acronym",
        "summary": "Convert a long phrase to its acronym",
        "level": "easy",
        "topics": [
            "regular expressions",
            "strings",
            "transforming"
        ]
    },
    "hello-world": {
        "title": "Hello World",
        "type" : "main",
        "summary": "The classical introductory exercise. Just say &quot;Hello, World!&quot;",
        "level": "easy",
        "topics": [
            "strings"
        ]
    },
    "space-age": {
        "title": "Space Age",
        "summary": "Given an age in seconds, calculate how old someone is in terms of a given planet&#39;s solar years.",
        "level": "easy",
        "topics": [
            "floating point numbers",
            "if else statements"
        ]
    },
    "two-fer": {
        "title": "Two Fer",
        "type" : "main",
        "summary": "Create a sentence of the form &quot;One for X, one for me.&quot;",
        "level": "easy",
        "topics": [
            "conditionals",
            "strings"
        ]
    },
    "hamming": {
        "title": "Hamming",
        "type" : "main",
        "summary": "Calculate the Hamming difference between two DNA strands.",
        "level": "easy",
        "topics": [
            "equality",
            "loops",
            "strings"
        ]
    },
    "raindrops": {
        "title": "Raindrops",
        "type" : "main",
        "summary": "Convert a number to a string, the contents of which depend on the number&#39;s factors.",
        "level": "easy",
        "topics": [
            "conditionals",
            "filtering",
            "strings"
        ]
    },
    "scrabble-score": {
        "title": "Scrabble Score",
        "type" : "main",
        "summary": "Given a word, compute the scrabble score for that word.",
        "level": "easy",
        "topics": [
            "loops",
            "maps",
            "strings"
        ]
    },
    "isogram": {
        "title": "Isogram",
        "type" : "main",
        "summary": "Determine if a word or phrase is an isogram.",
        "level": "easy",
        "topics": [
            "sequences",
            "strings"
        ]
    },
    "reverse-string": {
        "title": "Reverse String",
        "summary": "Reverse a string",
        "level": "easy",
        "topics": [
            "sequences",
            "strings"
        ]
    },
    "difference-of-squares": {
        "title": "Difference Of Squares",
        "type" : "main",
        "summary": "Find the difference between the square of the sum and the sum of the squares of the first N natural numbers.",
        "level": "easy",
        "topics": [
            "algorithms",
            "math"
        ]
    },
    "luhn": {
        "title": "Luhn",
        "type" : "main",
        "summary": "Given a number determine whether or not it is valid per the Luhn formula.",
        "level": "easy",
        "topics": [
            "algorithms",
            "integers",
            "strings"
        ]
    },
    "grains": {
        "title": "Grains",
        "type" : "main",
        "summary": "Calculate the number of grains of wheat on a chessboard given that the number on each square doubles.",
        "level": "easy",
        "topics": [
            "bitwise operations",
            "if else statements",
            "integers",
            "type conversion"
        ]
    },
    "clock": {
        "title": "Clock",
        "type" : "main",
        "summary": "Implement a clock that handles times without dates.",
        "level": "easy",
        "topics": [
            "equality",
            "text formatting",
            "time"
        ]
    },
    "parallel-letter-frequency": {
        "title": "Parallel Letter Frequency",
        "type" : "main",
        "summary": "Count the frequency of letters in texts using parallel computation.",
        "level": "easy",
        "topics": [
            "concurrency"
        ]
    },
    "tree-building": {
        "title": "Tree Building",
        "type" : "main",
        "summary": "Refactor a tree building algorithm.",
        "level": "easy",
        "topics": [
            "records",
            "refactoring",
            "sorting",
            "trees"
        ]
    },
    "robot-name": {
        "title": "Robot Name",
        "type" : "main",
        "summary": "Manage robot factory settings.",
        "level": "easy",
        "topics": [
            "randomness"
        ]
    },
    "tournament": {
        "title": "Tournament",
        "type" : "main",
        "summary": "Tally the results of a small football competition.",
        "level": "easy",
        "topics": [
            "integers",
            "parsing",
            "records",
            "sorting",
            "strings",
            "text formatting",
            "transforming"
        ]
    },
    "twelve-days": {
        "title": "Twelve Days",
        "type" : "main",
        "summary": "Output the lyrics to &#39;The Twelve Days of Christmas&#39;",
        "level": "medium",
        "topics": [
            "algorithms",
            "pattern recognition",
            "sequences",
            "strings",
            "text formatting"
        ]
    },
    "matrix": {
        "title": "Matrix",
        "type" : "main",
        "summary": "Given a string representing a matrix of numbers, return the rows and columns of that matrix.",
        "level": "medium",
        "topics": [
            "arrays",
            "exception handling",
            "matrices",
            "strings",
            "type conversion"
        ]
    },
    "sublist": {
        "title": "Sublist",
        "summary": "Write a function to determine if a list is a sublist of another list.",
        "level": "easy",
        "topics": [
            "arrays",
            "control flow loops"
        ]
    },
    "error-handling": {
        "title": "Error Handling",
        "type" : "main",
        "summary": "Implement various kinds of error handling and resource management",
        "level": "medium",
        "topics": [
            "exception handling"
        ]
    },
    "flatten-array": {
        "title": "Flatten Array",
        "summary": "Take a nested list and return a single list with all values except nil\/null",
        "level": "easy",
        "topics": [
            "arrays",
            "recursion"
        ]
    },
    "bank-account": {
        "title": "Bank Account",
        "type" : "main",
        "summary": "Simulate a bank account supporting opening\/closing, withdraws, and deposits of money. Watch out for concurrent transactions!",
        "level": "medium",
        "topics": [
            "concurrency",
            "integers"
        ]
    },
    "paasio": {
        "title": "Paasio",
        "summary": "Report network IO statistics",
        "level": "medium",
        "topics": [
            "concurrency",
            "interfaces",
            "networking"
        ]
    },
    "leap": {
        "title": "Leap",
        "summary": "Given a year, report if it is a leap year.",
        "level": "easy",
        "topics": [
            "booleans",
            "conditionals",
            "integers",
            "logic"
        ]
    },
    "accumulate": {
        "title": "Accumulate",
        "summary": "Implement the `accumulate` operation, which, given a collection and an operation to perform on each element of the collection, returns a new collection containing the result of applying that operation to each element of the input collection.",
        "level": "easy",
        "topics": [
            "lists"
        ]
    },
    "triangle": {
        "title": "Triangle",
        "summary": "Determine if a triangle is equilateral, isosceles, or scalene.",
        "level": "easy",
        "topics": [
            "booleans",
            "conditionals",
            "logic"
        ]
    },
    "secret-handshake": {
        "title": "Secret Handshake",
        "summary": "Given a decimal number, convert it to the appropriate sequence of events for a secret handshake.",
        "level": "medium",
        "topics": [
            "arrays",
            "bitwise operations",
            "integers"
        ]
    },
    "house": {
        "title": "House",
        "summary": "Output the nursery rhyme &#39;This is the House that Jack Built&#39;.",
        "level": "medium",
        "topics": [
            "recursion",
            "strings",
            "text formatting"
        ]
    },
    "pascals-triangle": {
        "title": "Pascal&#39;s Triangle",
        "summary": "Compute Pascal&#39;s triangle up to a given number of rows.",
        "level": "medium",
        "topics": [
            "algorithms",
            "arrays",
            "recursion",
            "math"
        ]
    },
    "series": {
        "title": "Series",
        "summary": "Given a string of digits, output all the contiguous substrings of length `n` in that string.",
        "level": "easy",
        "topics": [
            "arrays",
            "refactoring",
            "strings"
        ]
    },
    "queen-attack": {
        "title": "Queen Attack",
        "summary": "Given the position of two queens on a chess board, indicate whether or not they are positioned so that they can attack each other.",
        "level": "medium",
        "topics": [
            "booleans",
            "errors",
            "games",
            "logic"
        ]
    },
    "etl": {
        "title": "ETL",
        "summary": "We are going to do the `Transform` step of an Extract-Transform-Load.",
        "level": "easy",
        "topics": [
            "loops",
            "maps",
            "transforming"
        ]
    },
    "sum-of-multiples": {
        "title": "Sum Of Multiples",
        "summary": "Given a number, find the sum of all the multiples of particular numbers up to but not including that number.",
        "level": "medium",
        "topics": [
            "loops",
            "math"
        ]
    },
    "pythagorean-triplet": {
        "title": "Pythagorean Triplet",
        "summary": "There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product a * b * c.",
        "level": "medium",
        "topics": [
            "algorithms",
            "math"
        ]
    },
    "pangram": {
        "title": "Pangram",
        "summary": "Determine if a sentence is a pangram.",
        "level": "easy",
        "topics": [
            "loops",
            "strings"
        ]
    },
    "crypto-square": {
        "title": "Crypto Square",
        "summary": "Implement the classic method for composing secret messages called a square code.",
        "level": "easy",
        "topics": [
            "cryptography",
            "filtering",
            "strings",
            "text formatting",
            "transforming"
        ]
    },
    "food-chain": {
        "title": "Food Chain",
        "summary": "Generate the lyrics of the song &#39;I Know an Old Lady Who Swallowed a Fly&#39;",
        "level": "medium",
        "topics": [
            "conditionals",
            "loops",
            "recursion",
            "strings",
            "text formatting"
        ]
    },
    "largest-series-product": {
        "title": "Largest Series Product",
        "summary": "Given a string of digits, calculate the largest product for a contiguous substring of digits of length n.",
        "level": "easy",
        "topics": [
            "algorithms",
            "integers",
            "sequences",
            "math"
        ]
    },
    "sieve": {
        "title": "Sieve",
        "summary": "Use the Sieve of Eratosthenes to find all the primes from 2 up to a given number.",
        "level": "easy",
        "topics": [
            "algorithms",
            "integers",
            "loops",
            "sorting",
            "math"
        ]
    },
    "palindrome-products": {
        "title": "Palindrome Products",
        "summary": "Detect palindrome products in a given range.",
        "level": "medium",
        "topics": [
            "algorithms",
            "math"
        ]
    },
    "scale-generator": {
        "title": "Scale Generator",
        "summary": "Generate musical scales, given a starting note and a set of intervals. ",
        "level": "easy",
        "topics": [
            "pattern matching",
            "strings"
        ]
    },
    "protein-translation": {
        "title": "Protein Translation",
        "summary": "Translate RNA sequences into proteins.",
        "level": "easy",
        "topics": [
            "filtering",
            "maps",
            "sequences"
        ]
    },
    "perfect-numbers": {
        "title": "Perfect Numbers",
        "summary": "Determine if a number is perfect, abundant, or deficient based on Nicomachus&#39; (60 - 120 CE) classification scheme for natural numbers.",
        "level": "medium",
        "topics": [
            "algorithms",
            "filtering",
            "integers",
            "math"
        ]
    },
    "bracket-push": {
        "title": "Bracket Push",
        "summary": "Make sure the brackets and braces all match.",
        "level": "medium",
        "topics": [
            "parsing",
            "strings"
        ]
    },
    "anagram": {
        "title": "Anagram",
        "summary": "Given a word and a list of possible anagrams, select the correct sublist.",
        "level": "easy",
        "topics": [
            "filtering",
            "parsing",
            "sorting",
            "strings"
        ]
    },
    "word-count": {
        "title": "Word Count",
        "summary": "Given a phrase, count the occurrences of each word in that phrase.",
        "level": "easy",
        "topics": [
            "sorting",
            "strings"
        ]
    },
    "allergies": {
        "title": "Allergies",
        "summary": "Given a person&#39;s allergy score, determine whether or not they&#39;re allergic to a given item, and their full list of allergies.",
        "level": "medium",
        "topics": [
            "bitwise operations",
            "enumeration"
        ]
    },
    "rail-fence-cipher": {
        "title": "Rail Fence Cipher",
        "summary": "Implement encoding and decoding for the rail fence cipher.",
        "level": "medium",
        "topics": [
            "algorithms",
            "cryptography",
            "loops",
            "sorting",
            "strings",
            "text formatting",
            "transforming"
        ]
    },
    "rna-transcription": {
        "title": "RNA Transcription",
        "summary": "Given a DNA strand, return its RNA Complement Transcription.",
        "level": "easy",
        "topics": [
            "maps",
            "transforming"
        ]
    },
    "roman-numerals": {
        "title": "Roman Numerals",
        "summary": "Write a function to convert from normal numbers to Roman Numerals.",
        "level": "easy",
        "topics": [
            "numbers",
            "transforming"
        ]
    },
    "say": {
        "title": "Say",
        "summary": "Given a number from 0 to 999,999,999,999, spell out that number in English.",
        "level": "medium",
        "topics": [
            "numbers",
            "strings",
            "text formatting",
            "transforming"
        ]
    },
    "circular-buffer": {
        "title": "Circular Buffer",
        "summary": "A data structure that uses a single, fixed-size buffer as if it were connected end-to-end.",
        "level": "medium",
        "topics": [
            "queues",
            "structs"
        ]
    },
    "diamond": {
        "title": "Diamond",
        "summary": "Given a letter, print a diamond starting with &#39;A&#39; with the supplied letter at the widest point.",
        "level": "medium",
        "topics": [
            "algorithms",
            "conditionals",
            "loops",
            "strings",
            "text formatting"
        ]
    },
    "react": {
        "title": "React",
        "summary": "Implement a basic reactive system.",
        "level": "hard",
        "topics": [
            "callbacks",
            "interfaces",
            "reactive programming"
        ]
    },
    "custom-set": {
        "title": "Custom Set",
        "summary": "Create a custom set type.",
        "level": "medium",
        "topics": [
            "filtering",
            "loops",
            "sets"
        ]
    },
    "atbash-cipher": {
        "title": "Atbash Cipher",
        "summary": "Create an implementation of the atbash cipher, an ancient encryption system created in the Middle East.",
        "level": "easy",
        "topics": [
            "algorithms",
            "cryptography",
            "strings",
            "transforming"
        ]
    },
    "phone-number": {
        "title": "Phone Number",
        "summary": "Clean up user-entered phone numbers so that they can be sent SMS messages.",
        "level": "easy",
        "topics": [
            "conditionals",
            "regular expressions",
            "strings",
            "text formatting",
            "transforming"
        ]
    },
    "strain": {
        "title": "Strain",
        "summary": "Implement the `keep` and `discard` operation on collections. Given a collection and a predicate on the collection&#39;s elements, `keep` returns a new collection containing those elements where the predicate is true, while `discard` returns a new collection containing those elements where the predicate is false.",
        "level": "easy",
        "topics": [
            "arrays",
            "filtering",
            "loops"
        ]
    },
    "pig-latin": {
        "title": "Pig Latin",
        "summary": "Implement a program that translates from English to Pig Latin",
        "level": "medium",
        "topics": [
            "conditionals",
            "strings",
            "transforming"
        ]
    },
    "prime-factors": {
        "title": "Prime Factors",
        "summary": "Compute the prime factors of a given natural number.",
        "level": "easy",
        "topics": [
            "algorithms",
            "integers",
            "math"
        ]
    },
    "armstrong-numbers": {
        "title": "Armstrong Numbers",
        "summary": "Determine if a number is an Armstrong number",
        "level": "easy",
        "topics": [
            "algorithms",
            "integers",
            "math"
        ]
    },
    "transpose": {
        "title": "Transpose",
        "summary": "Take input text and output it transposed.",
        "level": "medium",
        "topics": [
            "loops",
            "strings",
            "transforming"
        ]
    },
    "nth-prime": {
        "title": "Nth Prime",
        "summary": "Given a number n, determine what the nth prime is.",
        "level": "easy",
        "topics": [
            "algorithms",
            "integers",
            "math"
        ]
    },
    "diffie-hellman": {
        "title": "Diffie Hellman",
        "summary": "Diffie-Hellman key exchange.",
        "level": "medium",
        "topics": [
            "algorithms",
            "cryptography",
            "integers",
            "transforming",
            "math"
        ]
    },
    "beer-song": {
        "title": "Beer Song",
        "summary": "Produce the lyrics to that beloved classic, that field-trip favorite: 99 Bottles of Beer on the Wall.",
        "level": "easy",
        "topics": [
            "loops",
            "strings",
            "text formatting"
        ]
    },
    "ocr-numbers": {
        "title": "OCR Numbers",
        "summary": "Given a 3 x 4 grid of pipes, underscores, and spaces, determine which number is represented, or whether it is garbled.",
        "level": "medium",
        "topics": [
            "parsing",
            "pattern recognition"
        ]
    },
    "wordy": {
        "title": "Wordy",
        "summary": "Parse and evaluate simple math word problems returning the answer as an integer.",
        "level": "easy",
        "topics": [
            "conditionals",
            "integers",
            "parsing",
            "strings",
            "type conversion"
        ]
    },
    "nucleotide-count": {
        "title": "Nucleotide Count",
        "summary": "Given a DNA string, compute how many times each nucleotide occurs in the string.",
        "level": "easy",
        "topics": [
            "maps",
            "parsing",
            "strings"
        ]
    },
    "grade-school": {
        "title": "Grade School",
        "summary": "Given students&#39; names along with the grade that they are in, create a roster for the school",
        "level": "medium",
        "topics": [
            "lists",
            "sorting",
            "structs"
        ]
    },
    "saddle-points": {
        "title": "Saddle Points",
        "summary": "Detect saddle points in a matrix.",
        "level": "medium",
        "topics": [
            "arrays",
            "integers",
            "matrices",
            "searching"
        ]
    },
    "meetup": {
        "title": "Meetup",
        "summary": "Calculate the date of meetups.",
        "level": "easy",
        "topics": [
            "dates",
            "time",
            "transforming",
            "type conversion"
        ]
    },
    "simple-linked-list": {
        "title": "Simple Linked List",
        "summary": "Write a simple linked list implementation that uses Elements and a List",
        "level": "medium",
        "topics": [
            "arrays",
            "loops"
        ]
    },
    "linked-list": {
        "title": "Linked List",
        "summary": "Implement a doubly linked list",
        "level": "medium",
        "topics": [
            "data structure",
            "pointer"
        ]
    },
    "binary-search": {
        "title": "Binary Search",
        "summary": "Implement a binary search algorithm.",
        "level": "medium",
        "topics": [
            "algorithms",
            "arrays",
            "searching",
            "sorting"
        ]
    },
    "binary-search-tree": {
        "title": "Binary Search Tree",
        "summary": "Insert and search for numbers in a binary tree.",
        "level": "medium",
        "topics": [
            "algorithms",
            "recursion",
            "searching",
            "sorting",
            "structs",
            "trees"
        ]
    },
    "kindergarten-garden": {
        "title": "Kindergarten Garden",
        "summary": "Given a diagram, determine which plants each child in the kindergarten class is responsible for.",
        "level": "easy",
        "topics": [
            "parsing",
            "records",
            "searching",
            "strings",
            "structs"
        ]
    },
    "simple-cipher": {
        "title": "Simple Cipher",
        "summary": "Implement a simple shift cipher like Caesar and a more secure substitution cipher",
        "level": "easy",
        "topics": [
            "algorithms",
            "cryptography",
            "interfaces",
            "strings",
            "transforming"
        ]
    },
    "pov": {
        "title": "POV",
        "summary": "Reparent a graph on a selected node",
        "level": "medium",
        "topics": [
            "graphs",
            "recursion",
            "structs",
            "transforming",
            "trees"
        ]
    },
    "minesweeper": {
        "title": "Minesweeper",
        "summary": "Add the numbers to a minesweeper board",
        "level": "medium",
        "topics": [
            "arrays",
            "games",
            "loops",
            "matrices",
            "transforming"
        ]
    },
    "robot-simulator": {
        "title": "Robot Simulator",
        "summary": "Write a robot simulator.",
        "level": "medium",
        "topics": [
            "concurrency",
            "loops",
            "sequences",
            "strings",
            "structs"
        ]
    },
    "word-search": {
        "title": "Word Search",
        "summary": "Create a program to solve a word search puzzle.",
        "level": "medium",
        "topics": [
            "matrices",
            "searching",
            "strings"
        ]
    },
    "all-your-base": {
        "title": "All Your Base",
        "summary": "Convert a number, represented as a sequence of digits in one base, to any other base.",
        "level": "easy",
        "topics": [
            "integers",
            "transforming",
            "math"
        ]
    },
    "connect": {
        "title": "Connect",
        "summary": "Compute the result for a game of Hex \/ Polygon",
        "level": "hard",
        "topics": [
            "arrays",
            "games",
            "graphs",
            "loops",
            "searching"
        ]
    },
    "ledger": {
        "title": "Ledger",
        "summary": "Refactor a ledger printer.",
        "level": "medium",
        "topics": [
            "dates",
            "integers",
            "records",
            "refactoring",
            "sorting",
            "strings",
            "text formatting"
        ]
    },
    "markdown": {
        "title": "Markdown",
        "summary": "Refactor a Markdown parser",
        "level": "medium",
        "topics": [
            "refactoring",
            "strings",
            "text formatting"
        ]
    },
    "yacht": {
        "title": "Yacht",
        "summary": "Score a single throw of dice in the game Yacht",
        "level": "medium",
        "topics": [
            "equality",
            "games",
            "integers",
            "parsing",
            "pattern matching",
            "sequences"
        ]
    },
    "poker": {
        "title": "Poker",
        "summary": "Pick the best hand(s) from a list of poker hands.",
        "level": "medium",
        "topics": [
            "equality",
            "games",
            "parsing",
            "pattern matching",
            "sequences",
            "strings"
        ]
    },
    "variable-length-quantity": {
        "title": "Variable Length Quantity",
        "summary": "Implement variable length quantity encoding and decoding.",
        "level": "medium",
        "topics": [
            "bitwise operations",
            "integers",
            "transforming"
        ]
    },
    "forth": {
        "title": "Forth",
        "summary": "Implement an evaluator for a very simple subset of Forth",
        "level": "hard",
        "topics": [
            "domain specific languages",
            "parsing",
            "stacks"
        ]
    },
    "change": {
        "title": "Change",
        "summary": "Correctly determine change to be given using the least number of coins",
        "level": "medium",
        "topics": [
            "algorithms",
            "arrays",
            "loops",
            "searching"
        ]
    },
    "bowling": {
        "title": "Bowling",
        "summary": "Score a bowling game",
        "level": "medium",
        "topics": [
            "algorithms",
            "arrays",
            "conditionals"
        ]
    },
    "run-length-encoding": {
        "title": "Run Length Encoding",
        "summary": "Implement run-length encoding and decoding.",
        "level": "medium",
        "topics": [
            "parsing",
            "strings",
            "transforming"
        ]
    },
    "collatz-conjecture": {
        "title": "Collatz Conjecture",
        "summary": "Calculate the number of steps to reach 1 using the Collatz conjecture",
        "level": "easy",
        "topics": [
            "conditionals",
            "control flow loops",
            "integers",
            "math"
        ]
    },
    "spiral-matrix": {
        "title": "Spiral Matrix",
        "summary": " Given the size, return a square matrix of numbers in spiral order.",
        "level": "medium",
        "topics": [
            "arrays",
            "loops",
            "matrices"
        ]
    },
    "book-store": {
        "title": "Book Store",
        "summary": "To try and encourage more sales of different books from a popular 5 book series, a bookshop has decided to offer discounts of multiple-book purchases.",
        "level": "hard",
        "topics": [
            "algorithms",
            "floating point numbers",
            "integers",
            "lists"
        ]
    },
    "rotational-cipher": {
        "title": "Rotational Cipher",
        "summary": "Create an implementation of the rotational cipher, also sometimes called the Caesar cipher.",
        "level": "easy",
        "topics": [
            "cryptography",
            "integers",
            "strings"
        ]
    },
    "proverb": {
        "title": "Proverb",
        "summary": "For want of a horseshoe nail, a kingdom was lost, or so the saying goes. Output the full text of this proverbial rhyme.",
        "level": "medium",
        "topics": [
            "arrays",
            "loops",
            "strings"
        ]
    },
    "isbn-verifier": {
        "title": "ISBN Verifier",
        "summary": "Check if a given string is a valid ISBN-10 number.",
        "level": "easy",
        "topics": [
            "arrays"
        ]
    },
    "zebra-puzzle": {
        "title": "Zebra Puzzle",
        "summary": "Solve the zebra puzzle.",
        "level": "medium",
        "topics": [
            "algorithms",
            "arrays",
            "searching"
        ]
    },
    "dominoes": {
        "title": "Dominoes",
        "summary": "Make a chain of dominoes.",
        "level": "medium",
        "topics": [
            "algorithms",
            "arrays",
            "searching"
        ]
    },
    "alphametics": {
        "title": "Alphametics",
        "summary": "Write a function to solve alphametics puzzles.",
        "level": "medium",
        "topics": [
            "algorithms",
            "arrays",
            "searching"
        ]
    },
    "two-bucket": {
        "title": "Two Bucket",
        "summary": "Given two buckets of different size, demonstrate how to measure an exact number of liters.",
        "level": "medium",
        "topics": [
            "algorithms",
            "conditionals",
            "searching"
        ]
    },
    "grep": {
        "title": "Grep",
        "summary": "Search a file for lines matching a regular expression pattern. Return the line number and contents of each matching line.",
        "level": "medium",
        "topics": [
            "algorithms",
            "arrays",
            "conditionals",
            "searching",
            "strings"
        ]
    },
    "rectangles": {
        "title": "Rectangles",
        "summary": "Count the rectangles in an ASCII diagram.",
        "level": "medium",
        "topics": [
            "arrays",
            "control flow conditionals",
            "control flow loops",
            "matrices",
            "strings"
        ]
    },
    "list-ops": {
        "title": "List Ops",
        "summary": "Implement basic list operations",
        "level": "easy",
        "topics": [
            "recursion",
            "type conversion",
            "lists",
            "functional programming"
        ]
    },
    "binary": {
        "title": "Binary",
        "summary": "Convert a binary number, represented as a string (e.g. &#39;101010&#39;), to its decimal equivalent using first principles",
        "topics": [
            "misc"
        ]
    },
    "counter": {
        "title": "Counter",
        "summary": "Design a test suite for a line\/letter\/character counter tool.",
        "topics": [
            "misc"
        ]
    },
    "hexadecimal": {
        "title": "Hexadecimal",
        "summary": "Convert a hexadecimal number, represented as a string (e.g. &quot;10af8c&quot;), to its decimal equivalent using first principles (i.e. no, you may not use built-in or external libraries to accomplish the conversion).",
        "topics": [
            "misc"
        ]
    },
    "octal": {
        "title": "Octal",
        "summary": "Convert a octal number, represented as a string (e.g. &#39;1735263&#39;), to its decimal equivalent using first principles (i.e. no, you may not use built-in or external libraries to accomplish the conversion).",
        "topics": [
            "misc"
        ]
    },
    "trinary": {
        "title": "Trinary",
        "summary": "Convert a trinary number, represented as a string (e.g. &#39;102012&#39;), to its decimal equivalent using first principles.",
        "topics": [
            "misc"
        ]
    }
}